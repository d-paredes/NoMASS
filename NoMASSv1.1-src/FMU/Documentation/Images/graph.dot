digraph doxygraph
{
graph [ rankdir="RL" ]
"class_agent" [ label="Agent\n|+Agent (  )\l+getBuildingID (  ) : int\l+getID (  ) : int\l+postTimeStep (  ) : void\l+postprocess (  ) : void\l+preprocess (  ) : void\l+setBuildingID ( id : const int ) : void\l+setID ( id : const int ) : void\l+setIDString ( idString : const std::string & ) : void\l+setup (  ) : void\l+step (  ) : void\l|#buildingID : int\l#id : int\l#idString : std::string\l" shape="record" ]
"class_appliance" [ label="Appliance\n«abstract»\n|+Appliance (  )\l+calculateHourOfDay (  ) : int\l+clear (  ) : void\l+getGridPower (  ) : double\l+getGridReceived (  ) : double\l+getGridReceivedCost (  ) : double\l+getGridSupply (  ) : double\l+getGridSupplyLeft (  ) : double\l+getLocalPower (  ) : double\l+getLocalReceived (  ) : double\l+getLocalReceivedCost (  ) : double\l+getLocalSupply (  ) : double\l+getLocalSupplyLeft (  ) : double\l+getNeighbourhoodPower (  ) : double\l+getNeighbourhoodReceived (  ) : double\l+getNeighbourhoodReceivedCost (  ) : double\l+getNeighbourhoodSupply (  ) : double\l+getNeighbourhoodSupplyLeft (  ) : double\l+getPower (  ) : double\l+getPriority (  ) : double\l+getReceived (  ) : double\l+getReceivedCost (  ) : double\l+getSupply (  ) : double\l+getSupplyCost (  ) : double\l+getSupplyLeft (  ) : double\l+hasActivities ( Activities : const std::vector\< int \> ) : bool\l+isGlobal (  ) : bool\l+isLocal (  ) : bool\l+save (  ) : void\l+saveGlobal (  ) : void\l+saveLocal (  ) : void\l+saveNeighbourhood (  ) : void\l+setActivities ( Activities : const std::vector\< int \> ) : void\l+setGlobal ( global : bool ) : void\l+setHoulyPriority ( priority : const std::vector\< double \> & ) : void\l+setHourlyCost ( cost : const std::vector\< double \> & ) : void\l+setLocal ( local : bool ) : void\l+setPower ( power : const double ) : void\l+setReceived ( r : const double ) : void\l+setReceivedCost ( c : const double ) : void\l+setSupply ( supply : const double ) : void\l+setSupplyCost ( supplyCost : const double ) : void\l+setSupplyLeft ( supplyLeft : const double ) : void\l+setup ( a : ConfigStructAppliance ) : void \{pure-virtual\}\l+setupSave (  ) : void\l#beforeClear (  ) : void \{virtual\}\l#saveGlobalCalculate (  ) : void \{virtual\}\l#saveLocalCalculate (  ) : void \{virtual\}\l#saveNeighbourhoodCalculate (  ) : void \{virtual\}\l|#Activities : std::vector\< int \>\l#datastoreGridIDCost : int\l#datastoreGridIDReceived : int\l#datastoreGridIDRequested : int\l#datastoreGridIDSupplied : int\l#datastoreGridIDSuppliedCost : int\l#datastoreIDCost : int\l#datastoreIDReceived : int\l#datastoreIDRequested : int\l#datastoreIDSupplied : int\l#datastoreIDSuppliedCost : int\l#datastoreLocalIDCost : int\l#datastoreLocalIDReceived : int\l#datastoreLocalIDRequested : int\l#datastoreLocalIDSupplied : int\l#datastoreLocalIDSuppliedCost : int\l#datastoreNeighbourhoodIDCost : int\l#datastoreNeighbourhoodIDReceived : int\l#datastoreNeighbourhoodIDRequested : int\l#datastoreNeighbourhoodIDSupplied : int\l#datastoreNeighbourhoodIDSuppliedCost : int\l#global : bool\l#hourlyCost : std::vector\< double \>\l#hourlyPriority : std::vector\< double \>\l#local : bool\l#match : bool\l#parameters : ApplianceParameters\l#parametersGrid : ApplianceParameters\l#parametersLocal : ApplianceParameters\l#parametersNeighbourhood : ApplianceParameters\l" shape="record" ]
"class_appliance" -> "class_agent" [ arrowhead="empty" style="bold" ]
"struct_appliance_parameters"
"class_appliance" -> "struct_appliance_parameters" [ arrowtail="diamond" dir="back" ]
"struct_appliance_parameters" [ label="ApplianceParameters\n||+power : double\l+received : double\l+receivedCost : double\l+suppliedLeft : double\l+supply : double\l+supplyCost : double\l" shape="record" ]
"class_appliance___battery" [ label="Appliance_Battery\n|+AddCost ( cost : double ) : void\l+Appliance_Battery (  )\l+clear (  ) : void\l+postprocess (  ) : void\l+rewardFunction ( mostShortage : double, binShortage : double ) : double \{virtual\}\l+setBatteryNeighbourhoodCharge ( batteryNeighbourhoodCharge : bool ) : void\l+setBatteryNeighbourhoodDischarge ( batteryNeighbourhoodDischarge : bool ) : void\l+setPowerShortage ( power : double ) : void\l/+setup ( a : ConfigStructAppliance ) : void \{virtual\}\l+setupModel (  ) : void\l+step (  ) : void\l+stepNeighbourhood (  ) : void\l#calculateDeltaE ( P_request : double ) : double\l#calculateStateOfCharge ( energy : double ) : void\l#calculateSupply (  ) : void\l#doAction (  ) : void\l#energy_calc (  ) : double\l#get_charge_delta (  ) : double\l#get_new_SOC_charge ( P_request : double ) : void\l#get_new_SOC_discharge ( P_request : double ) : double\l/#saveGlobalCalculate (  ) : void \{virtual\}\l/#saveNeighbourhoodCalculate (  ) : void \{virtual\}\l|#BatteryDeltaT : double\l#action : bool\l#batteryNeighbourhoodCharge : bool\l#batteryNeighbourhoodDischarge : bool\l#capacity : double\l#chargeRate : double\l#cost : double\l#datastoreIDstateOfCharge : int\l#dischargeRate : double\l#efficiency : double\l#mostShortage : double\l#powerShortage : double\l#previousHourOfDay : int\l#qLearning : QLearning\l#stateOfCharge : double\l#sumShort : double\l#sumSupply : double\l" shape="record" ]
"class_appliance___battery" -> "class_appliance" [ arrowhead="empty" style="bold,dashed" ]
"class_q_learning"
"class_appliance___battery" -> "class_q_learning" [ arrowtail="diamond" dir="back" ]
"class_appliance___battery___grid_cost___reward" [ label="Appliance_Battery_GridCost_Reward\n|+Appliance_Battery_GridCost_Reward (  )\l/+rewardFunction ( mostShortage : double, binShortage : double ) : double \{virtual\}\l|" shape="record" ]
"class_appliance___battery___grid_cost___reward" -> "class_appliance___battery" [ arrowhead="empty" style="bold" ]
"class_appliance___f_m_i" [ label="Appliance_FMI\n|+Appliance_FMI (  )\l+setFMIVariableName ( FMIVariableName : const std::string & ) : void\l/+setup ( a : ConfigStructAppliance ) : void \{virtual\}\l+step (  ) : void\l|-FMIVariableName : int\l" shape="record" ]
"class_appliance___f_m_i" -> "class_appliance" [ arrowhead="empty" style="bold,dashed" ]
"class_appliance___generic___c_s_v" [ label="Appliance_Generic_CSV\n|+Appliance_Generic_CSV (  )\l+setFileDemand ( filename : const std::string & ) : void\l+setFileSupply ( filename : const std::string & ) : void\l/+setup ( a : ConfigStructAppliance ) : void \{virtual\}\l+step (  ) : void\l|-enableDemand : bool\l-enableSupply : bool\l-fileDemand : std::string\l-fileSupply : std::string\l-modelDemand : Model_Appliance_Power_CSV\l-modelSupply : Model_Appliance_Power_CSV\l-powers : std::vector\< double \>\l" shape="record" ]
"class_appliance___generic___c_s_v" -> "class_appliance" [ arrowhead="empty" style="bold,dashed" ]
"class_model___appliance___power___c_s_v"
"class_appliance___generic___c_s_v" -> "class_model___appliance___power___c_s_v" [ arrowtail="diamond" dir="back" ]
"class_appliance___group" [ label="Appliance_Group\n|+Appliance_Group (  )\l+addGlobalContactsTo ( building_negotiation : Contract_Negotiation * ) : void\l+clear (  ) : void\l+getApplianceAt ( BuildingID : int, id : int ) : T\l+getPower (  ) : double\l+getReceived (  ) : double\l+getReceivedCost (  ) : double\l+getSupply (  ) : double\l+getSupplyCost (  ) : double\l+getSupplyLeft (  ) : double\l+globalNegotiation ( building_negotiation : const Contract_Negotiation & ) : void\l+hasActivities ( Activities : const std::vector\< int \> ) : void \{virtual\}\l+localNegotiation ( app_negotiation : const Contract_Negotiation & ) : void\l+negotiationApp ( app_negotiation : const Contract_Negotiation &, app : T &, negotiate : const bool ) : void \{virtual\}\l+negotiationAppGlobal ( app_negotiation : const Contract_Negotiation &, app : T &, negotiate : const bool ) : void \{virtual\}\l+neighbourhoodNegotiation ( building_negotiation : const Contract_Negotiation & ) : void\l+postprocess (  ) : void\l+sendCondition ( c : const Contract & ) : bool \{virtual\}\l+sendContractGlobal ( c : const Contract & ) : bool\l+sendContractLocal ( a : const T &, app_negotiation : Contract_Negotiation * ) : bool\l+setIDString ( id : const std::string ) : void\l+setup ( app : const std::vector\< ConfigStructAppliance \> &, buildingID : const int &, buildingString : const std::strin... ) : void\l+shuffleAppliances (  ) : void\l+step ( app_negotiation : Contract_Negotiation * ) : void\l+stepApp ( a : T &, app_negotiation : Contract_Negotiation * ) : void \{virtual\}\l#setupSave (  ) : void\l|#appliances : std::vector\< T \>\l#datastoreIDCost : int\l#datastoreIDReceived : int\l#datastoreIDRequested : int\l#datastoreIDSupplied : int\l#datastoreIDSuppliedCost : int\l#globalContracts : std::vector\< Contract \>\l#idString : std::string\l" shape="record" ]
"struct_contract"
"class_appliance___group" -> "struct_contract" [ arrowtail="diamond" dir="back" ]
"class_appliance___group___battery" [ label="Appliance_Group_Battery\n|+Appliance_Group_Battery (  )\l+getPowerShortage (  ) : double\l+globalCost ( globalCost : double ) : void\l/+negotiationApp ( app_negotiation : const Contract_Negotiation &, app : T &, negotiate : const bool ) : void \{virtual\}\l/+negotiationAppGlobal ( app_negotiation : const Contract_Negotiation &, app : T &, negotiate : const bool ) : void \{virtual\}\l+neighbourhoodNegotiationBattery ( building_negotiation : Contract_Negotiation * ) : void\l/+sendCondition ( c : const Contract & ) : bool \{virtual\}\l+setPowerShortage ( powerShortage : double ) : void\l/+stepApp ( a : T &, app_negotiation : Contract_Negotiation * ) : void \{virtual\}\l|-powerShortage : double\l" shape="record" ]
"class_appliance___group___battery" -> "class_appliance___group" [ arrowhead="empty" style="bold" ]
"class_appliance___large" [ label="Appliance_Large\n|+Appliance_Large (  )\l+isOn (  ) : bool\l/+setup ( a : ConfigStructAppliance ) : void \{virtual\}\l+setupModel (  ) : void \{virtual\}\l+step (  ) : void\l#setFile ( file : std::string ) : void\l|#file : std::string\l#model : Model_Appliance_Large_Usage_Survival\l#profileCSV : std::vector\< double \>\l" shape="record" ]
"class_appliance___large" -> "class_appliance" [ arrowhead="empty" style="bold,dashed" ]
"class_model___appliance___large___usage___survival"
"class_appliance___large" -> "class_model___appliance___large___usage___survival" [ arrowtail="diamond" dir="back" ]
"class_appliance___large___c_s_v" [ label="Appliance_Large_CSV\n|+Appliance_Large_CSV (  )\l+step (  ) : void\l/#setupModel (  ) : void \{virtual\}\l|#count : unsigned int\l#running : bool\l" shape="record" ]
"class_appliance___large___c_s_v" -> "class_appliance___large" [ arrowhead="empty" style="bold" ]
"class_appliance___large___learning" [ label="Appliance_Large_Learning\n|+Appliance_Large_Learning (  )\l+addToCost ( cost : const double ) : void\l+getRequiredTime ( hourOfDay : int ) : double\l+isModelOn (  ) : bool\l+postprocess (  ) : void\l+setHoulyTimeRequired ( houlyTimeRequired : const std::vector\< double \> & ) : void\l/+setup ( a : ConfigStructAppliance ) : void \{virtual\}\l+step (  ) : void\l#calculateProfile (  ) : void \{virtual\}\l#getPowerAt ( timestep : const int ) : double \{virtual\}\l/-beforeClear (  ) : void \{virtual\}\l-calculateLearntStartTime (  ) : void\l-calculateReward (  ) : double\l-eraseFirstPowerProfile (  ) : void\l-learnStepLessThanProfile (  ) : bool\l-saveActualProfile (  ) : void\l-startLearningPeriod ( hourOfTheDay : const int ) : void\l-stepApplianceOffAndNotLearning ( hourOfTheDay : const int ) : void\l-stopLearningPeriod ( hourOfTheDay : const int ) : void\l|#powerProfile : std::queue\< profileStruct \>\l-databaseIDactual : int\l-houlyTimeRequired : std::vector\< double \>\l-qLearning : QLearning\l" shape="record" ]
"class_appliance___large___learning" -> "class_appliance___large" [ arrowhead="empty" style="bold" ]
"class_appliance___large___learning" -> "class_q_learning" [ arrowtail="diamond" dir="back" ]
"structprofile_struct"
"class_appliance___large___learning" -> "structprofile_struct" [ arrowtail="diamond" dir="back" ]
"class_appliance___large___learning___c_s_v" [ label="Appliance_Large_Learning_CSV\n|+Appliance_Large_Learning_CSV (  )\l/#calculateProfile (  ) : void \{virtual\}\l/#setupModel (  ) : void \{virtual\}\l|" shape="record" ]
"class_appliance___large___learning___c_s_v" -> "class_appliance___large___learning" [ arrowhead="empty" style="bold" ]
"class_appliance___small" [ label="Appliance_Small\n|+Appliance_Small (  )\l/+setup ( a : ConfigStructAppliance ) : void \{virtual\}\l+step (  ) : void\l|-model : Model_Appliance_Small_Usage\l" shape="record" ]
"class_appliance___small" -> "class_appliance" [ arrowhead="empty" style="bold,dashed" ]
"class_model___appliance___small___usage"
"class_appliance___small" -> "class_model___appliance___small___usage" [ arrowtail="diamond" dir="back" ]
"class_building" [ label="Building\n|+Building (  )\l+addContactsTo ( building_negotiation : Contract_Negotiation *, battery : const bool ) : void\l+decisionBoolean ( val1 : const double, val2 : const double ) : bool\l+decisionDoubleVec ( val : const std::vector\< double \> &, power : const std::vector\< double \> &, currentState : const do... ) : double\l+getID (  ) : int\l+getPower (  ) : double\l+hasZone ( zoneName : const std::string & ) : bool\l+postTimeStep (  ) : void\l+postprocess (  ) : void\l+preprocess (  ) : void\l+setup ( buildingInput : const ConfigStructBuilding & ) : void\l+step (  ) : void\l+stepAppliancesNegotiation ( building_negotiation : const Contract_Negotiation & ) : void\l+stepAppliancesNegotiationNeighbourhood ( building_negotiation : const Contract_Negotiation & ) : void\l+stepAppliancesUse (  ) : void\l+stepAppliancesUseBatteries ( building_negotiation : Contract_Negotiation * ) : void\l-buildingInteractions (  ) : void\l-setAppGainsForZone ( zone : std::shared_ptr\< Building_Zone \> ) : void\l-setOccupantBlindDecisionForZone ( zone : std::shared_ptr\< Building_Zone \> ) : void\l-setOccupantCountForZone ( zone : std::shared_ptr\< Building_Zone \> ) : void\l-setOccupantGainsForZone ( zone : std::shared_ptr\< Building_Zone \> ) : void\l-setOccupantHeatDecisionsForZone ( zone : std::shared_ptr\< Building_Zone \> ) : void\l-setOccupantLightDecisionForZone ( zone : std::shared_ptr\< Building_Zone \> ) : void\l-setOccupantWindowDecisionForZone ( zone : std::shared_ptr\< Building_Zone \> ) : void\l-setZones ( zones : const std::vector\< std::shared_ptr\< Building_Zone \>\> & ) : void\l|-appliances : Building_Appliances\l-id : int\l-name : std::string\l-population : std::vector\< Occupant \>\l-presenceProfile : std::vector\< float \>\l-zones : std::vector\< std::shared_ptr\< Building_Zone \> \>\l" shape="record" ]
"class_building___zone"
"class_building" -> "class_building___zone" [ arrowtail="odiamond" dir="back" ]
"class_building___appliances"
"class_building" -> "class_building___appliances" [ arrowtail="diamond" dir="back" ]
"class_occupant"
"class_building" -> "class_occupant" [ arrowtail="diamond" dir="back" ]
"class_building___appliances" [ label="Building_Appliances\n|+Building_Appliances (  )\l+addContactsTo ( building_negotiation : Contract_Negotiation *, battery : const bool ) : void\l+addCurrentStates ( stateid : const int ) : void\l+getTotalPower (  ) : double\l+postTimeStep (  ) : void\l+postprocess (  ) : void\l+preprocess (  ) : void\l+setup ( b : const ConfigStructBuilding & ) : void\l+stepAppliancesUseBatteries ( building_negotiation : Contract_Negotiation * ) : void\l+stepGlobalNegotiation ( building_negotiation : const Contract_Negotiation & ) : void\l+stepLocal (  ) : void\l+stepLocalNegotiation (  ) : void\l+stepNeighbourhoodNegotiation ( building_negotiation : const Contract_Negotiation & ) : void\l|-app_negotiation : Contract_Negotiation\l-batteries : Appliance_Group_Battery\< Appliance_Battery \>\l-batteriesGrid : Appliance_Group_Battery\< Appliance_Battery_GridCost_Reward \>\l-buildingID : int\l-buildingString : std::string\l-csv : Appliance_Group\< Appliance_Generic_CSV \>\l-currentStates : std::vector\< int \>\l-datastoreIDNonShiftCost : int\l-datastoreIDNonShiftReceived : int\l-datastoreIDNonShiftRequested : int\l-datastoreIDNonShiftSupplied : int\l-datastoreIDNonShiftSuppliedCost : int\l-fmi : Appliance_Group\< Appliance_FMI \>\l-large : Appliance_Group\< Appliance_Large \>\l-largeCSV : Appliance_Group\< Appliance_Large_CSV \>\l-largeLearning : Appliance_Group\< Appliance_Large_Learning \>\l-largeLearningCSV : Appliance_Group\< Appliance_Large_Learning_CSV \>\l-small : Appliance_Group\< Appliance_Small \>\l-totalPower : double\l" shape="record" ]
"class_contract___negotiation"
"class_building___appliances" -> "class_contract___negotiation" [ arrowtail="diamond" dir="back" ]
"class_building___appliances" -> "class_appliance___generic___c_s_v" [ arrowtail="diamond" dir="back" ]
"class_building___appliances" -> "class_appliance___f_m_i" [ arrowtail="diamond" dir="back" ]
"class_building___appliances" -> "class_appliance___group___battery" [ arrowtail="diamond" dir="back" ]
"class_building___appliances" -> "class_appliance___battery" [ arrowtail="diamond" dir="back" ]
"class_building___appliances" -> "class_appliance___small" [ arrowtail="diamond" dir="back" ]
"class_building___appliances" -> "class_appliance___group" [ arrowtail="diamond" dir="back" ]
"class_building___appliances" -> "class_appliance___large___c_s_v" [ arrowtail="diamond" dir="back" ]
"class_building___appliances" -> "class_appliance___large___learning" [ arrowtail="diamond" dir="back" ]
"class_building___appliances" -> "class_appliance___large" [ arrowtail="diamond" dir="back" ]
"class_building___appliances" -> "class_appliance___large___learning___c_s_v" [ arrowtail="diamond" dir="back" ]
"class_building___appliances" -> "class_appliance___battery___grid_cost___reward" [ arrowtail="diamond" dir="back" ]
"class_building___zone" [ label="Building_Zone\n|+Building_Zone (  )\l+getActivities (  ) : std::vector\< int \>\l+getAirRelativeHumidity (  ) : double\l+getAirSystemSensibleHeatingRate (  ) : double\l+getBlindState (  ) : double\l+getCurrentOccupantCount (  ) : int\l+getCurrentOccupantGains (  ) : double\l+getDaylightingReferencePoint1Illuminance (  ) : double\l+getGroundFloor (  ) : double\l+getHeatingState (  ) : double\l+getId (  ) : int\l+getLightState (  ) : double\l+getMeanAirTemperature (  ) : double\l+getMeanRadiantTemperature (  ) : double\l+getNumberOfActivities (  ) : int\l+getOccupantFraction (  ) : float\l+getWindowDurationOpen (  ) : double\l+getWindowState (  ) : double\l+hasActivity ( activity : int ) : bool\l+isActive (  ) : bool\l+isNamed ( name : const std::string & ) : bool\l+setActive ( active : bool ) : void\l+setAppFraction ( appFraction : double ) : void\l+setBlindState ( state : double ) : void\l+setCurrentOccupantGains ( currentOccupantGains : double ) : void\l+setGroundFloor ( groundFloor : bool ) : void\l+setHeatingState ( state : double ) : void\l+setIDString ( idString : const std::string & ) : void\l+setLightState ( lightState : bool ) : void\l+setName ( name : const std::string & ) : void\l+setOccupantFraction ( occupantFraction : double ) : void\l+setWindowDurationOpen ( windowDurationOpen : double ) : void\l+setWindowState ( windowState : bool ) : void\l+setup ( zoneStruct : const ConfigStructZone & ) : void\l+step (  ) : void\l|-active : bool\l-activities : std::vector\< int \>\l-appFraction : double\l-blindState : double\l-currentOccupantGains : double\l-groundFloor : bool\l-heatingState : double\l-id : int\l-idString : std::string\l-lightState : bool\l-name : std::string\l-occupantFraction : double\l-variableNameAppFraction : int\l-variableNameAverageGains : int\l-variableNameBlindFraction : int\l-variableNameDaylighting : int\l-variableNameHeating : int\l-variableNameLight : int\l-variableNameNumberOfOccupants : int\l-variableNameWindow : std::vector\< int \>\l-variableNameZoneAirHeating : int\l-variableNameZoneAirRelativeHumidity : int\l-variableNameZoneMeanAirTemperature : int\l-variableNameZoneMeanRadiantTemp : int\l-windowState : bool\l" shape="record" ]
"struct_config_struct_agent" [ label="ConfigStructAgent\n||+ApplianceDuringDay : double\l+LightOffDuringAudioVisual : double\l+LightOffDuringSleep : double\l+ShadeClosedDuringSleep : double\l+ShadeClosedDuringWashing : double\l+ShadeDuringAudioVisual : double\l+ShadeDuringNight : double\l+WindowOpenDuringCooking : double\l+WindowOpenDuringSleeping : double\l+WindowOpenDuringWashing : double\l+age : std::string\l+bedroom : std::string\l+civstat : std::string\l+computer : std::string\l+edtry : std::string\l+famstat : std::string\l+name : std::string\l+office : std::string\l+power : double\l+profile : std::map\< int, std::string \>\l+retired : std::string\l+sex : std::string\l+shadeId : int\l+unemp : std::string\l+windowId : int\l" shape="record" ]
"struct_config_struct_appliance" [ label="ConfigStructAppliance\n||+Fractions : std::string\l+StateProbabilities : std::string\l+SumRatedPowers : std::string\l+WeibullParameters : std::string\l+activities : std::vector\< int \>\l+alpha : double\l+batteryNeighbourhoodCharge : bool\l+batteryNeighbourhoodDischarge : bool\l+cost : double\l+costVector : std::vector\< double \>\l+epsilon : double\l+fileDemand : std::string\l+fileProfile : std::string\l+fileSupply : std::string\l+gamma : double\l+id : int\l+name : std::string\l+priority : std::vector\< double \>\l+timeRequired : std::vector\< double \>\l+update : bool\l+variableName : std::string\l" shape="record" ]
"struct_config_struct_building" [ label="ConfigStructBuilding\n||+AppliancesBattery : std::vector\< ConfigStructAppliance \>\l+AppliancesBatteryGrid : std::vector\< ConfigStructAppliance \>\l+AppliancesCSV : std::vector\< ConfigStructAppliance \>\l+AppliancesFMI : std::vector\< ConfigStructAppliance \>\l+AppliancesGrid : std::vector\< ConfigStructAppliance \>\l+AppliancesLarge : std::vector\< ConfigStructAppliance \>\l+AppliancesLargeCSV : std::vector\< ConfigStructAppliance \>\l+AppliancesLargeLearning : std::vector\< ConfigStructAppliance \>\l+AppliancesLargeLearningCSV : std::vector\< ConfigStructAppliance \>\l+AppliancesSmall : std::vector\< ConfigStructAppliance \>\l+agents : std::vector\< ConfigStructAgent \>\l+id : int\l+name : std::string\l+zones : std::map\< std::string, ConfigStructZone \>\l" shape="record" ]
"struct_config_struct_zone"
"struct_config_struct_building" -> "struct_config_struct_zone" [ arrowtail="diamond" dir="back" ]
"struct_config_struct_building" -> "struct_config_struct_appliance" [ arrowtail="diamond" dir="back" ]
"struct_config_struct_building" -> "struct_config_struct_agent" [ arrowtail="diamond" dir="back" ]
"struct_config_struct_l_v_n_node" [ label="ConfigStructLVNNode\n||+children : std::vector\< int \>\l+id : int\l+impedance : double\l+parent : int\l" shape="record" ]
"struct_config_struct_shade" [ label="ConfigStructShade\n||+a01arr : float\l+a01int : float\l+a10arr : float\l+a10int : float\l+aSFlower : float\l+afulllower : float\l+afullraise : float\l+b01inarr : float\l+b01inint : float\l+b01sarr : float\l+b01sint : float\l+b10inarr : float\l+b10inint : float\l+b10sarr : float\l+b10sint : float\l+bSFlower : float\l+boutfulllower : float\l+boutfullraise : float\l+bsfulllower : float\l+bsfullraise : float\l+shapelower : float\l" shape="record" ]
"struct_config_struct_simulation" [ label="ConfigStructSimulation\n||+GridCost : std::vector\< double \>\l+ShadeClosedDuringNight : bool\l+agentHeatGains : bool\l+caseOrder : int\l+endDay : int\l+endMonth : int\l+heating : bool\l+learn : int\l+learnep : double\l+learnupdate : int\l+lights : bool\l+precision : int\l+presencePage : bool\l+save : bool\l+shading : bool\l+startDay : int\l+startDayOfWeek : int\l+startMonth : int\l+timeSteps : int\l+timeStepsPerHour : double\l+windows : bool\l+windowsLearn : bool\l" shape="record" ]
"struct_config_struct_window" [ label="ConfigStructWindow\n||+a01arr : double\l+a01dep : double\l+a01int : double\l+a10dep : double\l+aop : double\l+b01absdep : double\l+b01absprevarr : double\l+b01gddep : double\l+b01inarr : double\l+b01inint : double\l+b01outarr : double\l+b01outdep : double\l+b01outint : double\l+b01presint : double\l+b01rnarr : double\l+b01rnint : double\l+b10absdep : double\l+b10gddep : double\l+b10indep : double\l+b10outdep : double\l+bopout : double\l+shapeop : double\l" shape="record" ]
"struct_config_struct_zone" [ label="ConfigStructZone\n||+active : bool\l+activities : std::vector\< int \>\l+groundFloor : bool\l+id : int\l+name : std::string\l+windowCount : int\l" shape="record" ]
"class_configuration" [ label="Configuration\n|+getStepCount (  ) : int \{static\}\l+getZone ( zoneName : std::string * ) : ConfigStructZone \{static\}\l+isZoneGroundFloor ( zoneName : std::string * ) : bool \{static\}\l+lengthOfTimestep (  ) : double \{static\}\l+parseConfiguration ( filename : const std::string & ) : void \{static\}\l+reset (  ) : void \{static\}\l+setStepCount ( stepcount : const int ) : void \{static\}\l+step (  ) : void \{static\}\l-Configuration (  )\l-activityNamesToIds ( activities : const std::vector\< std::string \> & ) : std::vector\< int \> \{static\}\l-nameToLower ( node : const rapidxml::xml_node\<\> * ) : const std::string \{static\}\l-nodeNameIs ( node : const rapidxml::xml_node\<\> *, str2 : const char * ) : bool \{static\}\l-nodeNameIs ( name : const std::string &, str2 : const char * ) : bool \{static\}\l-parseAppliances ( node : rapidxml::xml_node\<\> *, b : ConfigStructBuilding * ) : void \{static\}\l-parseBuilding ( node : rapidxml::xml_node\<\> *, id : const int ) : void \{static\}\l-parseBuildings ( node : rapidxml::xml_node\<\> * ) : void \{static\}\l-parseLVN ( node : rapidxml::xml_node\<\> * ) : void \{static\}\l-parseLVNNode ( node : rapidxml::xml_node\<\> *, p : ConfigStructLVNNode * ) : void \{static\}\l-parseModels ( node : rapidxml::xml_node\<\> * ) : void \{static\}\l-parseOccupants ( node : rapidxml::xml_node\<\> *, b : ConfigStructBuilding * ) : void \{static\}\l-parseShades ( node : rapidxml::xml_node\<\> * ) : void \{static\}\l-parseWindows ( node : rapidxml::xml_node\<\> * ) : void \{static\}\l-prioritiesToVector ( priorities : const std::string & ) : std::vector\< double \> \{static\}\l-setValFromNodeIfName ( val : bool *, value : const std::string &, name : const std::string &, expected : const char * ) : void \{static\}\l-setValFromNodeIfName ( val : double *, value : const std::string &, name : const std::string &, expected : const char *... ) : void \{static\}\l-setValFromNodeIfName ( val : float *, value : const std::string &, name : const std::string &, expected : const char * ) : void \{static\}\l-setValFromNodeIfName ( val : int *, value : const std::string &, name : const std::string &, expected : const char * ) : void \{static\}\l-setValFromNodeIfName ( val : std::string *, value : const std::string &, name : const std::string &, expected : const c... ) : void \{static\}\l-strComp ( str1 : const char *, str2 : const char * ) : bool \{static\}\l-timeSteps (  ) : void \{static\}\l|+FileActivity : std::string \{static\}\l+FileLargeAppliance : std::string \{static\}\l+FolderSmallAppliance : std::string \{static\}\l+RunLocation : std::string \{static\}\l+buildings : std::vector\< ConfigStructBuilding \> \{static\}\l+info : ConfigStructSimulation \{static\}\l+lvn : std::vector\< ConfigStructLVNNode \> \{static\}\l+outputRegexs : std::vector\< std::string \> \{static\}\l+shades : std::map\< int, ConfigStructShade \> \{static\}\l+windows : std::map\< int, ConfigStructWindow \> \{static\}\l-stepCount : int \{static\}\l" shape="record" ]
"class_configuration" -> "struct_config_struct_window" [ arrowtail="diamond" dir="back" ]
"class_configuration" -> "struct_config_struct_l_v_n_node" [ arrowtail="diamond" dir="back" ]
"class_configuration" -> "struct_config_struct_building" [ arrowtail="diamond" dir="back" ]
"class_configuration" -> "struct_config_struct_simulation" [ arrowtail="diamond" dir="back" ]
"class_configuration" -> "struct_config_struct_shade" [ arrowtail="diamond" dir="back" ]
"struct_contract" [ label="Contract\n||+buildingID : int\l+id : int\l+priority : double\l+received : double\l+receivedCost : double\l+requested : double\l+supplied : double\l+suppliedCost : double\l+suppliedLeft : double\l" shape="record" ]
"class_contract___negotiation" [ label="Contract_Negotiation\n|+Contract_Negotiation (  )\l+clear (  ) : void\l+getContract ( buildingID : const int, id : const int ) : const Contract\l+getCostOfPowerForContract ( buildingID : const int, id : const int ) : double\l+getDifference (  ) : double\l+getReceivedPowerForContract ( buildingID : const int, id : const int ) : double\l+process (  ) : void\l+submit ( c : const Contract & ) : void\l-calcDifference ( c : const Contract & ) : void\l-insertPriority ( contract : const ContractPtr ) : void\l-insertSupply ( contract : const ContractPtr ) : void\l-processContracts (  ) : void\l-sameContract ( c1 : const ContractPtr, c2 : const ContractPtr ) : bool\l|-contracts : std::unordered_map\< int, std::unordered_map\< int, ContractPtr \> \>\l-contractsSupplied : std::vector\< ContractPtr \>\l-difference : double\l-nodePriority : Contract_Node_Priority\l-nodeSupply : Contract_Node_Supply\l" shape="record" ]
"class_contract___node___supply"
"class_contract___negotiation" -> "class_contract___node___supply" [ arrowtail="diamond" dir="back" ]
"class_contract___node___priority"
"class_contract___negotiation" -> "class_contract___node___priority" [ arrowtail="diamond" dir="back" ]
"class_contract___node___priority" [ label="Contract_Node_Priority\n|+Contract_Node_Priority (  )\l/+compare ( insert : const ContractPtr ) : bool \{virtual\}\l/+isNodeRemoveable ( ptr : const std::shared_ptr\< Contract_Node_Tree\< ContractPtr \>\> & ) : bool \{virtual\}\l/+isRemoveable (  ) : bool \{virtual\}\l/+makeLeft (  ) : void \{virtual\}\l/+makeRight (  ) : void \{virtual\}\l|" shape="record" ]
"class_contract___node___tree"
"class_contract___node___priority" -> "class_contract___node___tree" [ arrowhead="empty" style="bold,dashed" ]
"class_contract___node___supply" [ label="Contract_Node_Supply\n|+Contract_Node_Supply (  )\l/+compare ( insert : const ContractPtr ) : bool \{virtual\}\l/+isNodeRemoveable ( ptr : const std::shared_ptr\< Contract_Node_Tree\< ContractPtr \>\> & ) : bool \{virtual\}\l/+isRemoveable (  ) : bool \{virtual\}\l/+makeLeft (  ) : void \{virtual\}\l/+makeRight (  ) : void \{virtual\}\l|" shape="record" ]
"class_contract___node___supply" -> "class_contract___node___tree" [ arrowhead="empty" style="bold,dashed" ]
"class_contract___node___tree" [ label="Contract_Node_Tree\n«abstract»\n|+clear (  ) : void\l+compare ( insert : const T ) : bool \{pure-virtual\}\l+findLeftEdge (  ) : T\l+findRightEdge (  ) : T\l+getNodeObject (  ) : const T\l+insert ( insert : const T &, value : double ) : void\l+isLeftNull (  ) : bool\l+isNodeRemoveable ( ptr : const std::shared_ptr\< Contract_Node_Tree\< T \>\> & ) : bool \{pure-virtual\}\l+isRemoveable (  ) : bool \{pure-virtual\}\l+isRightNull (  ) : bool\l+makeLeft (  ) : void \{pure-virtual\}\l+makeRight (  ) : void \{pure-virtual\}\l+popLeftEdge (  ) : T\l#Contract_Node_Tree (  )\l|#nodeObject : T\l#pLeft : std::shared_ptr\< Contract_Node_Tree\< T \> \>\l#pRight : std::shared_ptr\< Contract_Node_Tree\< T \> \>\l-isAssigned : bool\l-value : double\l" shape="record" ]
"class_contract___node___tree" -> "class_contract___node___tree" [ arrowtail="odiamond" dir="back" ]
"class_data_store" [ label="DataStore\n|+addValue ( id : const int &, val : const float ) : void \{static\}\l+addValueS ( name : const std::string &, val : const float ) : void \{static\}\l+addVariable ( name : const std::string & ) : int \{static\}\l+clear (  ) : void \{static\}\l+clearValues (  ) : void \{static\}\l+getID ( name : const std::string & ) : int \{static\}\l+getValue ( id : const int & ) : float \{static\}\l+getValueForZone ( name : const std::string &, zoneName : const std::string & ) : float \{static\}\l+getValueS ( name : const std::string & ) : float \{static\}\l+print (  ) : void \{static\}\l-DataStore (  )\l|-intMap : std::vector\< std::vector\< float \> \> \{static\}\l-variableCount : int \{static\}\l-variableMap : std::unordered_map\< std::string, int \> \{static\}\l" shape="record" ]
"class_environment" [ label="Environment\n|+calculateDailyMeanTemperature (  ) : void \{static\}\l+getDailyMeanTemperature (  ) : double \{static\}\l+getEVG (  ) : double \{static\}\l+getOutdoorAirDrybulbTemperature (  ) : double \{static\}\l-Environment (  )\l|+dailyMeanTemperature : double \{static\}\l-outDoorTemperatures : std::deque\< double \> \{static\}\l" shape="record" ]
"class_l_v_n" [ label="LVN\n|+LVN (  )\l+postTimeStep (  ) : void\l+setPowerForID ( power : const double, id : const int ) : void\l+setup (  ) : void\l|-enabled : bool\l-rootNode : LVN_Node\l" shape="record" ]
"class_l_v_n___node"
"class_l_v_n" -> "class_l_v_n___node" [ arrowtail="diamond" dir="back" ]
"class_l_v_n___node" [ label="LVN_Node\n|+LVN_Node (  )\l+addChildren ( ids : const std::vector\< int \> & ) : void\l+addNode ( node : const LVN_Node & ) : void\l+backwardSweep ( parent_voltage : const std::complex\< double \> & ) : void\l+checkTolerance (  ) : double\l+forwardSweep (  ) : void\l+getID (  ) : int\l+resetIterations (  ) : void\l+runUntilConvergence ( tolerance : double ) : void\l+save (  ) : void\l+setID ( id : const int ) : void\l+setImpedance ( value : const std::complex\< double \> & ) : void\l+setNodeLoad ( nodeLoad : const std::complex\< double \> & ) : void\l+setNominalVoltage ( value : const std::complex\< double \> & ) : void\l+setPowerForID ( power : const std::complex\< double \> &, id : const int ) : bool\l+setup (  ) : void\l-setComplexPower ( power : const std::complex\< double \> & ) : void\l|-complexPower : std::complex\< double \>\l-complexPowerStr : int\l-currentLine : std::complex\< double \>\l-currentLineStr : int\l-currentLoad : std::complex\< double \>\l-currentLoadStr : int\l-id : int\l-impedance : std::complex\< double \>\l-impedanceStr : int\l-iteration : int\l-iterationStr : int\l-joinedNodes : std::vector\< LVN_Node \>\l-nodeLoad : std::complex\< double \>\l-nodeLoadStr : int\l-nominalVoltage : std::complex\< double \>\l-nominalVoltageStr : int\l-root : bool\l-slackVoltage : std::complex\< double \>\l-slackVoltageStr : int\l-voltage : std::complex\< double \>\l-voltageStr : int\l" shape="record" ]
"class_l_v_n___node" -> "class_l_v_n___node" [ arrowtail="diamond" dir="back" ]
"class_log" [ label="Log\n|+Log (  )\l+error (  ) : void\l+getError (  ) : bool\l+operator\<\< ( t : const T & ) : Log &\l+printLog (  ) : void \{static\}\l+reset (  ) : void\l|-buf : std::stringstream \{static\}\l-errorFlag : bool \{static\}\l" shape="record" ]
"struct_model_instance" [ label="ModelInstance\n||+GUID : fmiString\l+b : fmiBoolean *\l+eventInfo : fmiEventInfo\l+functions : fmiCallbackFunctions\l+i : fmiInteger *\l+instanceName : fmiString\l+isPositive : fmiBoolean *\l+loggingOn : fmiBoolean\l+r : fmiReal *\l+s : fmiString *\l+sim : Simulation\l+state : ModelState\l+time : fmiReal\l" shape="record" ]
"class_simulation"
"struct_model_instance" -> "class_simulation" [ arrowtail="diamond" dir="back" ]
"structfmi_callback_functions"
"struct_model_instance" -> "structfmi_callback_functions" [ arrowtail="diamond" dir="back" ]
"structfmi_event_info"
"struct_model_instance" -> "structfmi_event_info" [ arrowtail="diamond" dir="back" ]
"class_model___activity" [ label="Model_Activity\n|+Model_Activity (  )\l+multinominalActivity ( p : const double, hourCount : const int ) : int \{virtual\}\l+multinominalP ( p : double ) : void\l+preProcessActivities (  ) : std::vector\< double \>\l+setAge ( age : const std::string & ) : void\l+setCivstat ( civstat : const std::string & ) : void\l+setComputer ( computer : const std::string & ) : void\l+setEdtry ( edtry : const std::string & ) : void\l+setFamstat ( famstat : const std::string & ) : void\l+setProbMap ( probMap : const std::map\< int, std::string \> & ) : void\l+setRetired ( retired : const std::string & ) : void\l+setSex ( sex : const std::string & ) : void\l+setUnemp ( unemp : const std::string & ) : void\l#disaggregate (  ) : std::vector\< double \>\l#getDay ( day : const int ) : std::string\l#getSeasonInt ( month : const int ) : int\l#getSeasonString ( month : const int ) : std::string\l#multinominal (  ) : std::vector\< double \>\l#parseConfiguration ( filename : const std::string ) : void\l#parseOther ( node : rapidxml::xml_node\<\> * ) : void \{virtual\}\l|#age : std::string\l#civstat : std::string\l#computer : std::string\l#dictionary : std::map\< int, std::map\< std::string, std::vector\< double \> \> \>\l#edtry : std::string\l#famstat : std::string\l#probMap : std::map\< int, std::string \>\l#retired : std::string\l#sex : std::string\l#unemp : std::string\l" shape="record" ]
"class_model___random_weibull"
"class_model___activity" -> "class_model___random_weibull" [ arrowhead="empty" style="bold" ]
"class_model___activity___survival" [ label="Model_Activity_Survival\n|+Model_Activity_Survival (  )\l/+multinominalActivity ( p : const double, hourCount : const int ) : int \{virtual\}\l/-parseOther ( node : rapidxml::xml_node\<\> * ) : void \{virtual\}\l-randomWeibull ( scale : double, shape : double ) : double\l|-duration : double\l-scales : std::map\< int, std::vector\< double \> \>\l-shapes : std::map\< int, std::vector\< double \> \>\l-state : int\l" shape="record" ]
"class_model___activity___survival" -> "class_model___activity" [ arrowhead="empty" style="bold" ]
"class_model___appliance___large___usage" [ label="Model_Appliance_Large_Usage\n|+Model_Appliance_Large_Usage (  )\l+consumption ( timeStep : const int ) : double\l+getCountry (  ) : std::string\l+getMeanFraction (  ) : double\l+getPower (  ) : double\l+isOn (  ) : bool\l+onAt ( timeStep : const int ) : bool \{virtual\}\l+parseConfiguration ( filename : const std::string ) : void\l+setCountry ( name : const std::string & ) : void\l+setID ( id : const int ) : void\l#as_vector ( node : rapidxml::xml_node\<\> * ) : std::vector\< T \>\l#as_vector_vector ( node : rapidxml::xml_node\<\> * ) : std::vector\< std::vector\< T \> \>\l#parseShapeScale ( node : rapidxml::xml_node\<\> * ) : void \{virtual\}\l#probOn ( timestep : int ) : double\l|#country : std::string\l#id : int\l#maxPower : double\l#meanF : std::vector\< double \>\l#name : std::string\l#on : bool\l#onProbabilities : std::vector\< double \>\l#onProbabilities10 : std::vector\< double \>\l#state : int\l#transitions : std::vector\< std::vector\< double \> \>\l" shape="record" ]
"class_model___appliance___large___usage" -> "class_model___random_weibull" [ arrowhead="empty" style="bold" ]
"class_model___appliance___large___usage___survival" [ label="Model_Appliance_Large_Usage_Survival\n|+Model_Appliance_Large_Usage_Survival (  )\l+decreaseDuration (  ) : void\l/+onAt ( timeStep : const int ) : bool \{virtual\}\l+setDuration ( duration : double ) : void\l+setScale ( scale : double ) : void\l+setShape ( shape : double ) : void\l/-parseShapeScale ( node : rapidxml::xml_node\<\> * ) : void \{virtual\}\l-randomWeibull (  ) : double\l|-duration : double\l-scale : double\l-shape : double\l" shape="record" ]
"class_model___appliance___large___usage___survival" -> "class_model___appliance___large___usage" [ arrowhead="empty" style="bold" ]
"class_model___appliance___ownership" [ label="Model_Appliance_Ownership\n|+Model_Appliance_Ownership (  )\l+cooker ( age : const int, employment : const int, bedrooms : const int, education : const int ) : double\l+dishwasher ( socclass : const int, internet : const int, cohabitants : const int, hometype : const int, ownrent : const... ) : double\l+fridge (  ) : double\l+microware (  ) : double\l+tvless21 ( sex : const int, internet : const int, cohabitants : const int, over15 : const int, education : const int ) : double\l+tvmore21 ( sex : const int, employment : const int, cohabitants : const int, hometype : const int, ownrent : const int,... ) : double\l+washingMachine ( sex : const int, ownrent : const int, bedrooms : const int, internetregother : const int ) : double\l|" shape="record" ]
"class_model___appliance___power___c_s_v" [ label="Model_Appliance_Power_CSV\n|+Model_Appliance_Power_CSV (  )\l+parseConfiguration ( filename : const std::string & ) : void\l+power ( dayOfYear : const int, minuteOfday : const int ) : double\l|-profile : std::vector\< std::vector\< double \> \>\l" shape="record" ]
"class_model___appliance___small___usage" [ label="Model_Appliance_Small_Usage\n|+Model_Appliance_Small_Usage (  )\l+calculateStateAtTenMin ( timeAsInt : int ) : int\l+consumption ( timeStep : const int ) : double\l+durationAtState ( state : int ) : double\l+getFractionalPowerAtState ( state : int ) : double\l+getStateProbabilities (  ) : Utility::uTable\< double \>\l+readFractions ( file : const std::string & ) : void\l+readStateProbabilities ( file : const std::string & ) : void\l+readSumRatedPowers ( file : const std::string & ) : void\l+readWeibullParameters ( file : const std::string & ) : void\l+setFolderLocation ( folderLocation : const std::string & ) : void\l+setRatedPowerAt ( i : const int ) : void\l+weibullInvCdf ( loc : float, shape : float, scale : float ) : double\l|-duration : double\l-folderLocation : std::string\l-fractions : std::vector\< double \>\l-name : std::string\l-ratedPower : double\l-state : int\l-stateProbabilities : Utility::uTable\< double \>\l-sumRatedPowers : std::vector\< double \>\l-weibullLoc : std::vector\< double \>\l-weibullScale : std::vector\< double \>\l-weibullShape : std::vector\< double \>\l" shape="record" ]
"class_model___appliance___small___usage" -> "class_model___random_weibull" [ arrowhead="empty" style="bold" ]
"class_model___external_shading" [ label="Model_ExternalShading\n|+Model_ExternalShading (  )\l+arrival ( state : double, Lumint : double, Evg : double ) : double\l+departure ( state : double, Lumint : double, Evg : double ) : double\l+intermediate ( state : bool, Lumint : double, Evg : double ) : double\l+setArrivalVars ( a01arr : float, b01inarr : float, b01sarr : float, a10arr : float, b10inarr : float, b10sarr : float ) : void\l+setDurationVars ( aSFlower : float, bSFlower : float, shapelower : float ) : void\l+setFullVars ( afullraise : float, boutfullraise : float, bsfullraise : float, bsfulllower : float, boutfulllower : floa... ) : void\l+setInterVars ( a01int : float, b01inint : float, b01sint : float, a10int : float, b10inint : float, b10sint : float ) : void\l-arrivalLowering ( state : double, Evg : double ) : double\l-arrivalRaising ( state : double, Evg : double ) : double\l-departureLowering ( state : double, Evg : double ) : double\l-departureRaising ( state : double, Evg : double ) : double\l|-a01arr : float\l-a01int : float\l-a10arr : float\l-a10int : float\l-aSFlower : float\l-afulllower : float\l-afullraise : float\l-b01inarr : float\l-b01inint : float\l-b01sarr : float\l-b01sint : float\l-b10inarr : float\l-b10inint : float\l-b10sarr : float\l-b10sint : float\l-bSFlower : float\l-boutfulllower : float\l-boutfullraise : float\l-bsfulllower : float\l-bsfullraise : float\l-shapelower : float\l" shape="record" ]
"class_model___external_shading" -> "class_model___random_weibull" [ arrowhead="empty" style="bold" ]
"class_model___heat_gains" [ label="Model_HeatGains\n|+Model_HeatGains (  )\l+calculate ( metabolicRate : double, reativeHumidity : double, meanRadiantTemperature : double, externalWork : double, t... ) : void\l+getAllHeatGains (  ) : double\l+getConvectiveHeatGains (  ) : double\l+getDryRespiration (  ) : double\l+getLatentRespirationHeatGains (  ) : double\l+getPmv (  ) : double\l+getPpd (  ) : double\l+getRadiantHeatGains (  ) : double\l+getSweatEvaporation (  ) : double\l-aHCTCLcalc ( ta : double, icl : double, airVelocityAndBodyMovement : double, surfaceAreaOfClothing : double, metabolicR... ) : void\l-computePaCIBSEGuideC ( actualMeanRadiantTemperature : double, reativeHumidity : double ) : double\l|-convectiveHeatGains : double\l-dryRespiration : double\l-hc : double\l-latentRespirationHeatGains : double\l-maxI : int\l-pmv : double\l-ppd : double\l-radiantHeatGains : double\l-sweatEvaporation : double\l-tcl : double\l-vapourDiffusion : double\l-xn : double\l" shape="record" ]
"class_model___lights" [ label="Model_Lights\n|+Model_Lights (  )\l+arrival ( state : bool, Lumint : double ) : bool\l+departure ( state : bool, futureDuration : double ) : bool\l+intermediate ( state : bool, Lumint : double ) : bool\l|" shape="record" ]
"class_model___presence" [ label="Model_Presence\n|+Model_Presence (  )\l+at ( i : const int ) : bool\l+calculatePresenceFromPage (  ) : void\l+presentForFutureSteps (  ) : int\l+setProbMap ( probMap : const std::map\< int, std::string \> & ) : void\l+size (  ) : unsigned int\l-getT01 ( pcurr : double, pnext : double, shuff : double ) : double\l-getT11 ( pcurr : double, pnext : double, shuff : double ) : double\l|-currentDurationOfPresenceState : std::vector\< int \>\l-presenceForFutureSteps : std::vector\< int \>\l-presenceState : std::vector\< int \>\l-probMap : std::map\< int, std::string \>\l" shape="record" ]
"class_model___random_weibull" [ label="Model_RandomWeibull\n|+Model_RandomWeibull (  )\l+probability ( m : double ) : double \{static\}\l+randomDouble (  ) : double \{static\}\l+randomDouble ( min : double, max : double ) : double \{static\}\l+randomWeibull ( scale : double, shape : double ) : double \{static\}\l|" shape="record" ]
"class_model___windows" [ label="Model_Windows\n|+Model_Windows (  )\l+arrival ( indoorTemperature : double, outdoorTemperature : double, previousDuration : double, rain : bool, timeStepLeng... ) : void\l+departure ( indoorTemperature : double, dailyMeanTemperature : double, futureDuration : double, groundFloor : double ) : void\l+getA01arr (  ) : double\l+getA01dep (  ) : double\l+getA01int (  ) : double\l+getA10dep (  ) : double\l+getAop (  ) : double\l+getB01absdep (  ) : double\l+getB01absprevarr (  ) : double\l+getB01gddep (  ) : double\l+getB01inarr (  ) : double\l+getB01inint (  ) : double\l+getB01outarr (  ) : double\l+getB01outdep (  ) : double\l+getB01outint (  ) : double\l+getB01presint (  ) : double\l+getB01rnarr (  ) : double\l+getB01rnint (  ) : double\l+getB10absdep (  ) : double\l+getB10gddep (  ) : double\l+getB10indep (  ) : double\l+getB10outdep (  ) : double\l+getBopout (  ) : double\l+getDurationOpen (  ) : int\l+getWindowState (  ) : bool\l+getshapeop (  ) : double\l+intermediate ( indoorTemperature : double, outdoorTemperature : double, currentDuration : double, rain : bool, timeStep... ) : void\l+setArrivalVars ( a01arr : double, b01inarr : double, b01outarr : double, b01absprevarr : double, b01rnarr : double ) : void\l+setDepartureVars ( a01dep : double, b01outdep : double, b01absdep : double, b01gddep : double, a10dep : double, b10inde... ) : void\l+setDurationOpen ( durationOpen : int ) : void\l+setDurationVars ( aop : double, bopout : double, shapeop : double ) : void\l+setInterVars ( a01int : double, b01inint : double, b01outint : double, b01presint : double, b01rnint : double ) : void\l+setWindowState ( windowState : bool ) : void\l-calculateDurationOpen ( outdoorTemperature : double ) : double\l|-a01arr : double\l-a01dep : double\l-a01int : double\l-a10dep : double\l-aop : double\l-b01absdep : double\l-b01absprevarr : double\l-b01gddep : double\l-b01inarr : double\l-b01inint : double\l-b01outarr : double\l-b01outdep : double\l-b01outint : double\l-b01presint : double\l-b01rnarr : double\l-b01rnint : double\l-b10absdep : double\l-b10gddep : double\l-b10indep : double\l-b10outdep : double\l-bopout : double\l-durationOpen : int\l-shapeop : double\l-state : bool\l" shape="record" ]
"class_model___windows" -> "class_model___random_weibull" [ arrowhead="empty" style="bold" ]
"class_occupant" [ label="Occupant\n|+InteractionOnZone ( zone : const Building_Zone & ) : bool\l+Occupant (  )\l+currentlyInZone ( zone : const Building_Zone & ) : bool\l+getCurrentRadientGains ( zone : const Building_Zone & ) : double\l+getDesiredAppliance ( zone : const Building_Zone & ) : double\l+getDesiredHeatState ( zone : const Building_Zone & ) : double\l+getDesiredLightState ( zone : const Building_Zone & ) : bool\l+getDesiredShadeState ( zone : const Building_Zone & ) : double\l+getDesiredWindowState ( zone : const Building_Zone & ) : bool\l+getPower (  ) : double\l+getStateID (  ) : int\l+isActionAppliance ( zone : const Building_Zone & ) : bool\l+isActionHeatGains ( zone : const Building_Zone & ) : bool\l+isActionLearning ( zone : const Building_Zone & ) : bool\l+isActionLights ( zone : const Building_Zone & ) : bool\l+isActionShades ( zone : const Building_Zone & ) : bool\l+isActionWindow ( zone : const Building_Zone & ) : bool\l+postTimeStep (  ) : void\l+postprocess (  ) : void\l+previouslyInZone ( zone : const Building_Zone & ) : bool\l+setBuildingName ( buildingName : const std::string & ) : void\l+setState ( state : const State & ) : void\l+setup ( id : int, agent : const ConfigStructAgent &, zones : const std::vector\< std::shared_ptr\< Building_Zone \>\> & ) : void\l+step (  ) : void\l+zoneInteractions (  ) : void\l-calculateExternalShadeInteractionsOnZone ( zone : const Building_Zone & ) : double\l-calculateLightInteractionsOnZone ( zone : const Building_Zone & ) : bool\l-calculateMetabolicHeatGainsOnZone ( zone : const Building_Zone & ) : double\l-calculateWindowInteractionsOnZone ( zone : const Building_Zone & ) : bool\l-getPMV ( zone : const Building_Zone & ) : double\l-initialiseStates ( zones : const std::vector\< std::shared_ptr\< Building_Zone \>\> & ) : void\l-matchStateToZone ( s : State *, zones : const std::vector\< std::shared_ptr\< Building_Zone \>\> & ) : void\l-model_activity ( agent : const ConfigStructAgent & ) : void\l-model_pastAndFutureDurations (  ) : void\l-model_presenceFromPage ( agent : const ConfigStructAgent & ) : void\l|-action : int\l-activities : std::vector\< double \>\l-agentZones : std::vector\< Occupant_Zone \>\l-availableActions : std::vector\< int \>\l-bedroom : std::string\l-buildingName : std::string\l-clo : double\l-currentRadientGains : double\l-datastoreIdActivity : int\l-datastoreIdHeatGains : int\l-heatState : bool\l-learn : bool\l-metabolicRate : double\l-office : std::string\l-power : double\l-state : State\l-stateMachine : StateMachine\l-zonePtrPrevious : std::shared_ptr\< Building_Zone \>\l" shape="record" ]
"class_occupant" -> "class_agent" [ arrowhead="empty" style="bold" ]
"class_occupant" -> "class_building___zone" [ arrowtail="odiamond" dir="back" ]
"class_state"
"class_occupant" -> "class_state" [ arrowtail="diamond" dir="back" ]
"class_occupant___zone"
"class_occupant" -> "class_occupant___zone" [ arrowtail="diamond" dir="back" ]
"class_state_machine"
"class_occupant" -> "class_state_machine" [ arrowtail="diamond" dir="back" ]
"class_occupant___action" [ label="Occupant_Action\n|+Occupant_Action (  )\l+getCurrentDurationOfPresenceState ( activities : const std::vector\< double \> & ) : double\l+getFutureDurationOfAbsenceState ( activities : const std::vector\< double \> & ) : double\l+getPreviousDurationOfAbsenceState ( activities : const std::vector\< double \> & ) : double\l+getResult (  ) : double\l+setAvailableActivities ( availableActivities : const std::vector\< int \> ) : void\l+setReward ( reward : const double ) : void\l+setZoneId ( zoneId : const double ) : void\l#activityAvailable ( act : const int ) : bool\l|#availableActivities : std::vector\< int \>\l#result : double\l#reward : double\l#zoneId : int\l" shape="record" ]
"class_occupant___action___appliance" [ label="Occupant_Action_Appliance\n|+Occupant_Action_Appliance (  )\l|" shape="record" ]
"class_occupant___action___appliance" -> "class_occupant___action" [ arrowhead="empty" style="bold" ]
"class_occupant___action___appliance___b_d_i" [ label="Occupant_Action_Appliance_BDI\n|+Occupant_Action_Appliance_BDI (  )\l+doRecipe ( activities : const std::vector\< double \> & ) : bool\l+setApplianceDuringDay ( ApplianceDuringDay : double ) : void\l-calculateFirstLastCouts ( activities : const std::vector\< double \> & ) : void\l|-ApplianceDuringDay : double\l-first : int\l-last : int\l" shape="record" ]
"class_occupant___action___appliance___b_d_i" -> "class_occupant___action___appliance" [ arrowhead="empty" style="bold" ]
"class_occupant___action___heat___gains" [ label="Occupant_Action_Heat_Gains\n|+Occupant_Action_Heat_Gains (  )\l+getPMV (  ) : double\l+getPPD (  ) : double\l+prestep ( clo : double, metabolicRate : double ) : void\l+setup ( buildingID : int, agentid : int ) : void\l+step ( zone : const Building_Zone &, inZone : const bool ) : void\l|-buildingID : int\l-clo : double\l-datastoreIdClo : int\l-datastoreIdMetabolicRate : int\l-datastoreIdPmv : int\l-datastoreIdPmvAirHumid : int\l-datastoreIdPmvAirTemp : int\l-datastoreIdPmvMeanRadient : int\l-datastoreIdPmvSetpoint : int\l-datastoreIdPpd : int\l-id : int\l-metabolicRate : double\l-pmv : double\l-ppd : double\l" shape="record" ]
"class_occupant___action___heat___gains" -> "class_occupant___action" [ arrowhead="empty" style="bold" ]
"class_occupant___action___heating_set_points___learning" [ label="Occupant_Action_HeatingSetPoints_Learning\n|+Occupant_Action_HeatingSetPoints_Learning (  )\l+print (  ) : void\l+reset (  ) : void\l+setFile ( file : std::string ) : void\l+setup ( id : const int, learn : const int ) : void\l+step ( zone : const Building_Zone &, inZone : const bool ) : void\l-getState (  ) : int\l-parseConfiguration ( filename : const std::string ) : void\l|-agentId : int\l-file : std::string\l-hasBeenInZone : bool\l-learnId : int\l-pmv : double\l-pmv_name : int\l-previousHour : int\l-qlWeekDay : QLearning\l-qlWeekEnd : QLearning\l-setPoint : double\l-stateMappings : std::vector\< std::vector\< int \> \>\l-step_name : int\l-steps : double\l" shape="record" ]
"class_occupant___action___heating_set_points___learning" -> "class_occupant___action" [ arrowhead="empty" style="bold" ]
"class_occupant___action___heating_set_points___learning" -> "class_q_learning" [ arrowtail="diamond" dir="back" ]
"class_occupant___action___lights" [ label="Occupant_Action_Lights\n|+Occupant_Action_Lights (  )\l+step ( zone : const Building_Zone &, inZone : const bool, previouslyInZone : const bool, activities : const std::vector... ) : void\l|" shape="record" ]
"class_occupant___action___lights" -> "class_occupant___action" [ arrowhead="empty" style="bold" ]
"class_occupant___action___lights___b_d_i" [ label="Occupant_Action_Lights_BDI\n|+Occupant_Action_Lights_BDI (  )\l+doRecipe ( activities : const std::vector\< double \> & ) : bool\l+setOffDuringAudioVisual ( OffDuringAudioVisual : double ) : void\l+setOffDuringSleep ( OffDuringSleep : double ) : void\l|-OffDuringAudioVisual : double\l-OffDuringSleep : double\l" shape="record" ]
"class_occupant___action___lights___b_d_i" -> "class_occupant___action___lights" [ arrowhead="empty" style="bold" ]
"class_occupant___action___shades" [ label="Occupant_Action_Shades\n|+Occupant_Action_Shades (  )\l+setIndoorIlluminance ( lumint : const float ) : void\l+setup ( windowID : int ) : void\l+step ( zone : const Building_Zone &, inZone : const bool, previouslyInZone : const bool ) : void\l|#Lumint : float\l-m_blindUsage : Model_ExternalShading\l" shape="record" ]
"class_occupant___action___shades" -> "class_occupant___action" [ arrowhead="empty" style="bold" ]
"class_occupant___action___shades" -> "class_model___external_shading" [ arrowtail="diamond" dir="back" ]
"class_occupant___action___shades___b_d_i" [ label="Occupant_Action_Shades_BDI\n|+Occupant_Action_Shades_BDI (  )\l+doRecipe ( activities : const std::vector\< double \> & ) : bool\l+setClosedDuringAudioVisual ( ShadeClosedDuringAudioVisual : double ) : void\l+setClosedDuringNight ( ShadeClosedDuringNight : double ) : void\l+setClosedDuringSleep ( ShadeClosedDuringSleep : double ) : void\l+setClosedDuringWashing ( ShadeClosedDuringWashing : double ) : void\l|-ShadeClosedDuringAudioVisual : double\l-ShadeClosedDuringNight : double\l-ShadeClosedDuringSleep : double\l-ShadeClosedDuringWashing : double\l" shape="record" ]
"class_occupant___action___shades___b_d_i" -> "class_occupant___action___shades" [ arrowhead="empty" style="bold" ]
"class_occupant___action___window" [ label="Occupant_Action_Window\n|+Occupant_Action_Window (  )\l+durationOpen (  ) : int\l+saveResult (  ) : void\l+setDailyMeanTemperature ( dailyMeanTemperature : double ) : void\l+setup ( windowID : int, id : int ) : void\l|#dailyMeanTemperature : double\l#m_window : Model_Windows\l#variableNameWindowDesire : int\l" shape="record" ]
"class_occupant___action___window" -> "class_occupant___action" [ arrowhead="empty" style="bold" ]
"class_occupant___action___window" -> "class_model___windows" [ arrowtail="diamond" dir="back" ]
"class_occupant___action___window___learning" [ label="Occupant_Action_Window_Learning\n|+print (  ) : void\l+reset (  ) : void\l+setup ( id : const int ) : void\l+step ( zone : const Building_Zone &, inZone : const bool, previouslyInZone : const bool ) : void\l|-learn : QLearning\l-window_name : int\l" shape="record" ]
"class_occupant___action___window___learning" -> "class_occupant___action___window" [ arrowhead="empty" style="bold" ]
"class_occupant___action___window___learning" -> "class_q_learning" [ arrowtail="diamond" dir="back" ]
"class_occupant___action___window___stochastic" [ label="Occupant_Action_Window_Stochastic\n|+Occupant_Action_Window_Stochastic (  )\l+setup ( windowID : int, id : int ) : void\l+step ( zone : const Building_Zone &, inZone : const bool, previouslyInZone : const bool, activities : const std::vector... ) : void\l|" shape="record" ]
"class_occupant___action___window___stochastic" -> "class_occupant___action___window" [ arrowhead="empty" style="bold" ]
"class_occupant___action___window___stochastic___b_d_i" [ label="Occupant_Action_Window_Stochastic_BDI\n|+Occupant_Action_Window_Stochastic_BDI (  )\l+doRecipe ( activities : const std::vector\< double \> & ) : bool\l+enabled (  ) : bool\l+setDailyMeanTemperature ( dailyMeanTemperature : double ) : void\l+setOpenDuringCooking ( OpenDuringCooking : double ) : void\l+setOpenDuringSleeping ( OpenDuringSleeping : double ) : void\l+setOpenDuringWashing ( OpenDuringWashing : double ) : void\l|-OpenDuringCooking : double\l-OpenDuringSleeping : double\l-OpenDuringWashing : double\l-dailyMeanTemperature : double\l" shape="record" ]
"class_occupant___action___window___stochastic___b_d_i" -> "class_occupant___action___window___stochastic" [ arrowhead="empty" style="bold" ]
"class_occupant___zone" [ label="Occupant_Zone\n|+Occupant_Zone (  )\l+actionStep ( action : int, zone : const Building_Zone &, inZone : bool, preZone : bool, activities : const std::vector\<... ) : void\l+getDesiredAppliance (  ) : double\l+getDesiredHeatingSetPoint (  ) : double\l+getDesiredLightState (  ) : bool\l+getDesiredShadeState (  ) : double\l+getDesiredWindowDuration (  ) : int\l+getDesiredWindowState (  ) : bool\l+getHeatgains (  ) : double\l+getId (  ) : int\l+getPMV (  ) : double\l+isActionAppliance (  ) : bool\l+isActionHeatGains (  ) : bool\l+isActionLearning (  ) : bool\l+isActionLights (  ) : bool\l+isActionShades (  ) : bool\l+isActionWindow (  ) : bool\l+postTimeStep (  ) : void\l+postprocess (  ) : void\l+setClo ( clo : double ) : void\l+setMetabolicRate ( metabolicRate : double ) : void\l+setup ( buildingID : int, buldingZone : const Building_Zone &, agentid : int, agent : const ConfigStructAgent & ) : void\l+step ( zone : const Building_Zone &, zonePrevious : const Building_Zone &, activities : const std::vector\< double \> & ) : void\l+stepPre ( zone : const Building_Zone &, zonePrevious : const Building_Zone &, activities : const std::vector\< double \> ... ) : void\l-BDI ( activities : const std::vector\< double \> & ) : void\l-disableBDI (  ) : void\l-enableBDI (  ) : void\l-isInBuilding (  ) : bool\l-setupLights ( agent : const ConfigStructAgent &, buldingZone : const Building_Zone & ) : void\l-setupShades ( agent : const ConfigStructAgent &, buldingZone : const Building_Zone & ) : void\l-setupWindows ( agentid : int, agent : const ConfigStructAgent &, buldingZone : const Building_Zone & ) : void\l-shuffleActions (  ) : void\l|-ActionAppliance : bool\l-ActionHeatGains : bool\l-ActionLearning : bool\l-ActionLights : bool\l-ActionShades : bool\l-ActionWindow : bool\l-aaa : Occupant_Action_Appliance_BDI\l-aahg : Occupant_Action_Heat_Gains\l-aal : Occupant_Action_Lights\l-aalBDI : Occupant_Action_Lights_BDI\l-aalearn : Occupant_Action_HeatingSetPoints_Learning\l-aas : Occupant_Action_Shades\l-aasBDI : Occupant_Action_Shades_BDI\l-aaw : Occupant_Action_Window_Stochastic\l-aawBDI : Occupant_Action_Window_Stochastic_BDI\l-aawLearn : Occupant_Action_Window_Learning\l-availableActions : std::vector\< int \>\l-buildingID : int\l-clo : double\l-desiredApplianceState : double\l-desiredHeatingSetPoint : double\l-desiredLightState : bool\l-desiredShadeState : double\l-desiredWindowState : bool\l-hasBDI : bool\l-heatgains : double\l-id : int\l-metabolicRate : double\l-pmv : double\l-ppd : double\l-previous_pmv : double\l" shape="record" ]
"class_occupant___zone" -> "class_occupant___action___heating_set_points___learning" [ arrowtail="diamond" dir="back" ]
"class_occupant___zone" -> "class_occupant___action___window___stochastic___b_d_i" [ arrowtail="diamond" dir="back" ]
"class_occupant___zone" -> "class_occupant___action___shades___b_d_i" [ arrowtail="diamond" dir="back" ]
"class_occupant___zone" -> "class_occupant___action___window___stochastic" [ arrowtail="diamond" dir="back" ]
"class_occupant___zone" -> "class_occupant___action___appliance___b_d_i" [ arrowtail="diamond" dir="back" ]
"class_occupant___zone" -> "class_occupant___action___shades" [ arrowtail="diamond" dir="back" ]
"class_occupant___zone" -> "class_occupant___action___lights___b_d_i" [ arrowtail="diamond" dir="back" ]
"class_occupant___zone" -> "class_occupant___action___window___learning" [ arrowtail="diamond" dir="back" ]
"class_occupant___zone" -> "class_occupant___action___lights" [ arrowtail="diamond" dir="back" ]
"class_occupant___zone" -> "class_occupant___action___heat___gains" [ arrowtail="diamond" dir="back" ]
"class_q_learning" [ label="QLearning\n|+QLearning (  )\l+getAction (  ) : double\l+greedySelection ( s : const int ) : int\l+learn (  ) : void\l+printQ (  ) : void\l+reset (  ) : void \{virtual\}\l+setAction ( action : const double ) : void\l+setActions ( actions : const int ) : void\l+setAlpha ( alpha : double ) : void\l+setEpsilon ( epsilon : const double ) : void\l+setFilename ( filename : const std::string ) : void\l+setGamma ( gamma : double ) : void\l+setId ( id : const int ) : void \{virtual\}\l+setReward ( reward : const double ) : void\l+setState ( state : const int ) : void\l+setStates ( states : const int ) : void\l+setUpdate ( update : bool ) : void\l+setup (  ) : void\l+updateQ ( s : const int, a : const int, r : const double, sp : const int ) : void\l-getBestAction ( s : const int ) : int\l|#action : int\l#actions : int\l#filename : std::string\l#id : int\l#learnNext : bool\l#previous_reward : double\l#previous_state : int\l#reward : double\l#state : int\l#states : int\l-action_name : int\l-alpha : double\l-epsilon : double\l-gamma : double\l-previous_state_name : int\l-qTable : std::vector\< std::vector\< double \> \>\l-reward_name : int\l-state_name : int\l-update : bool\l" shape="record" ]
"class_simulation" [ label="Simulation\n|+Simulation (  )\l+getGridCost (  ) : double \{static\}\l+parseConfiguration ( file : const std::string & ) : void\l+postTimeStep (  ) : void\l+postprocess (  ) : void\l+preTimeStep (  ) : void\l+preprocess (  ) : void\l+setConfigurationurationFile ( filename : const std::string & ) : void\l+setupSimulationModel (  ) : void\l+timeStep (  ) : void\l-calculateGridCost (  ) : void \{static\}\l|-GridCostDataId : int\l-GridPowerDataId : int\l-GridReceivedDataId : int\l-building_negotiation : Contract_Negotiation\l-buildings : std::vector\< Building \>\l-gridCost : double \{static\}\l-lvn : LVN\l-monthCount : std::vector\< int \>\l-simulationConfigurationFile : std::string\l" shape="record" ]
"class_simulation" -> "class_l_v_n" [ arrowtail="diamond" dir="back" ]
"class_simulation" -> "class_contract___negotiation" [ arrowtail="diamond" dir="back" ]
"class_simulation" -> "class_building" [ arrowtail="diamond" dir="back" ]
"class_simulation_time" [ label="SimulationTime\n|+preprocess (  ) : void \{static\}\l+reset (  ) : void \{static\}\l+trackTime (  ) : void \{static\}\l-SimulationTime (  )\l|+databaseIdDay : int \{static\}\l+databaseIdHour : int \{static\}\l+databaseIdHourOfDay : int \{static\}\l+databaseIdMinute : int \{static\}\l+databaseIdMinuteOfDay : int \{static\}\l+databaseIdMonth : int \{static\}\l+databaseIdStepCount : int \{static\}\l+day : int \{static\}\l+hour : int \{static\}\l+hourOfDay : int \{static\}\l+minute : int \{static\}\l+minuteOfDay : int \{static\}\l+month : int \{static\}\l+stepCount : int \{static\}\l-monthCount : std::vector\< int \> \{static\}\l" shape="record" ]
"class_state" [ label="State\n|+State (  )\l+State ( id : int, metabolicRate : double, clo : double, activity : const std::string & )\l+addState ( s : State ) : void\l+getClo (  ) : double\l+getId (  ) : int\l+getMetabolicRate (  ) : double\l+getState ( stateID : const int ) : State \{virtual\}\l+getZonePtr (  ) : std::shared_ptr\< Building_Zone \>\l+hasState ( stateID : const int ) : bool \{virtual\}\l+isInActivity ( activity : const std::string & ) : bool\l+numberOfSubStates (  ) : unsigned int\l+setActivity ( activity : const std::string & ) : void\l+setClo ( clo : double ) : void\l+setId ( id : int ) : void\l+setMetabolicRate ( metabolicRate : double ) : void\l+setZonePtr ( zoneptr : std::shared_ptr\< Building_Zone \> ) : void\l+~State (  ) \{virtual\}\l|#activity : std::string\l#clo : double\l#id : int\l#metabolicRate : double\l#states : std::vector\< State \>\l#zone : std::shared_ptr\< Building_Zone \>\l" shape="record" ]
"class_state" -> "class_building___zone" [ arrowtail="odiamond" dir="back" ]
"class_state" -> "class_state" [ arrowtail="diamond" dir="back" ]
"class_state_machine" [ label="StateMachine\n|+StateMachine (  )\l+addState ( s : const State & ) : void\l+hasState ( stateID : const int ) : bool\l+numberOfStates (  ) : unsigned int\l+transistionTo ( stateID : const int ) : State\l|-states : std::unordered_map\< int, State \>\l" shape="record" ]
"class_state_machine" -> "class_state" [ arrowtail="diamond" dir="back" ]
"class_utility" [ label="Utility\n|+calculateNumberOfDays ( startDay : int, startMonth : int, endDay : int, endMonth : int ) : int \{static\}\l+csvToDouble ( s : const std::string & ) : std::vector\< double \> \{static\}\l+csvToInt ( s : const std::string & ) : std::vector\< int \> \{static\}\l+csvToTable ( filename : const std::string & ) : uTable\< T \> \{static\}\l+csvToTable ( filename : const std::string &, header : bool ) : uTable\< T \> \{static\}\l+csvToTableHead ( filename : const std::string & ) : std::vector\< std::string \> \{static\}\l+cumulativeProbability ( v : const double *, len : const int ) : int \{static\}\l+cumulativeProbability ( v : const std::vector\< double \> & ) : int \{static\}\l+randomDouble ( min : double, max : double ) : double \{static\}\l+randomInt ( min : int, max : int ) : int \{static\}\l+randomIntVect ( number : int ) : std::vector\< int \> \{static\}\l+setSeed ( seed : int ) : void \{static\}\l+splitCSV ( typeString : const std::string &, types : std::vector\< std::string \> * ) : void \{static\}\l+tossACoin (  ) : bool \{static\}\l-Utility (  )\l|+engine : std::mt19937_64 \{static\}\l-r : std::random_device \{static\}\l" shape="record" ]
"structfmi_callback_functions" [ label="fmiCallbackFunctions\n||+allocateMemory : fmiCallbackAllocateMemory\l+freeMemory : fmiCallbackFreeMemory\l+logger : fmiCallbackLogger\l+stepFinished : fmiStepFinished\l" shape="record" ]
"structfmi_event_info" [ label="fmiEventInfo\n||+iterationConverged : fmiBoolean\l+nextEventTime : fmiReal\l+stateValueReferencesChanged : fmiBoolean\l+stateValuesChanged : fmiBoolean\l+terminateSimulation : fmiBoolean\l+upcomingTimeEvent : fmiBoolean\l" shape="record" ]
"structprofile_struct" [ label="profileStruct\n||+cost : double\l+isLearningPeriod : bool\l+learningStep : unsigned int\l+maxTimeRequired : double\l+nonLearningStep : int\l+power : std::vector\< double \>\l+requestedTime : int\l+startTime : int\l" shape="record" ]
}
